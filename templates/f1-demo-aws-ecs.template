{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This template takes about 25 minutes to deploy. In this template multiple ",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Network Configuration"
                    },
                    "Parameters": [
                        "VPCID",
                        "CIDRBlockCluster",
                        "ClusterSize",
                        "ClusterInstanceType",
                        "ClusterVolSize",
                        "PrivateSubnet1ID",
                        "PrivateSubnet2ID",
                        "PrivateSubnet3ID",
                        "PublicSubnet1ID",
                        "PublicSubnet2ID",
                        "PublicSubnet3ID",
                        "AdminIngressLocation"
                    ]
                },
                {
                    "Label": {
                        "default": "Spotfire Studio Configuration"
                    },
                    "Parameters": [
                        "InstanceType",
                        "VolSize",
                        "KeyName"
                    ]
                },
                {
                    "Label": {
                        "default": "Database Setup"
                    },
                    "Parameters": [
                        "DBUsername",
                        "DBPassword"
                    ]
                }
            ],
            "ParameterLabels": {
                "AdminIngressLocation": {
                    "default": "Admin Ingress Location:"
                },
                "CIDRBlockCluster": {
                    "default": "VPC CIDR:"
                },
                "ClusterInstanceType": {
                    "default": "ECS Cluster Instance Type"
                },
                "ClusterSize": {
                    "default": "ECS Cluster Size"
                },
                "ClusterVolSize" :{
                    "default": "Volume size of ECS Cluster Instances"
                },
                "DBPassword": {
                    "default": "Aurora DB password:"
                },
                "DBUsername": {
                    "default": "Aurora DB username:"
                },
                "InstanceType": {
                    "default": "Spotfire Instance Type:"
                },
                "KeyName": {
                    "default": "Key Pair:"
                },
                "PrivateSubnet1ID": {
                    "default": "Private Subnet ID 1:"
                },
                "PrivateSubnet2ID": {
                    "default": "Private Subnet ID 2:"
                },
                "PrivateSubnet3ID": {
                    "default": "Private Subnet ID 3:"
                },
                "PublicSubnet1ID": {
                    "default": "Public Subnet ID 1:"
                },
                "PublicSubnet2ID": {
                    "default": "Public Subnet ID 2:"
                },
                "PublicSubnet3ID": {
                    "default": "Public Subnet ID 3:"
                },
                "VPCID": {
                    "default": "VPC ID"
                },
                "VolSize": {
                    "default": "Spotfire Instance Volume Size:"
                }
            }
        }
    },
    "Parameters": {
        "AdminIngressLocation": {
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x",
            "Description": "CIDR block (IP address range). Use 0.0.0.0/0 to allow access from all locations. You can always manually change this later if needed.",
            "MaxLength": "18",
            "MinLength": "9",
            "Type": "String"
        },
        "CIDRBlockCluster": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
            "Default": "10.0.0.0/16",
            "Description": "CIDR block for the VPC",
            "Type": "String"
        },
        "ClusterInstanceType": {
            "AllowedValues": [
                "t3.xlarge",
                "t3.2xlarge",
                "m5.xlarge",
                "m5.2xlarge",
                "m5.4xlarge",
                "m5.12xlarge",
                "c5n.xlarge",
                "c5n.2xlarge",
                "c5n.4xlarge",
                "c5.xlarge",
                "c5.2xlarge",
                "c5.4xlarge"
            ],
            "ConstraintDescription": "ClusterInstanceType must be a valid EC2 instance type.",
            "Default": "m5.xlarge",
            "Description": "Select an instance type for EC2 instances to be created in the ECS cluster.",
            "Type": "String"
        },
        "ClusterSize": {
            "ConstraintDescription": "ClusterSize must be numeric and between 2 and 20",
            "Default": 2,
            "Description": "Number of EC2 instances to be created initially in the ECS Cluster (2-20). This value will be used to set the Min, Max and Desired count of instances in the Auto Scaling Group.",
            "MaxValue": 20,
            "MinValue": 2,
            "Type": "Number"
        },
        "ClusterVolSize": {
            "ConstraintDescription": "ClusterVolSize must be numeric and between 30 and 16384.",
            "Default": 30,
            "Description": "Volume Size (GB) for ECS cluster instances",
            "MaxValue": 16384,
            "MinValue": 30,
            "Type": "Number"
        },
        "DBPassword": {
            "ConstraintDescription": "This password needs to be set for your Aurora DB. The max length of this password is 12 characters, the min length is 8 characters",
            "Description": "Password to access Aurora DB",
            "MaxLength": 12,
            "MinLength": 8,
            "NoEcho": "true",
            "Type": "String"
        },
        "DBUsername": {
            "Description": "Username for Aurora DB",
            "Type": "String"
        },
        "InstanceType": {
            "AllowedValues": [
                "t3.large",
                "t3.xlarge",
                "t3.2xlarge",
                "m5.large",
                "m5.xlarge",
                "m5.2xlarge",
                "m5.4xlarge",
                "m5.12xlarge",
                "c5n.large",
                "c5n.xlarge",
                "c5n.2xlarge",
                "c5n.4xlarge",
                "c5.large",
                "c5.xlarge",
                "c5.2xlarge",
                "c5.4xlarge"
            ],
            "ConstraintDescription": "InstanceType must be a valid EC2 instance type.",
            "Default": "m5.large",
            "Description": "Select an instance type to run Spotfire",
            "Type": "String"
        },
        "KeyName": {
            "AllowedPattern": "[-_ a-zA-Z0-9]*",
            "ConstraintDescription": "Must be the name of an existing key pair. It can contain only alphanumeric characters, spaces, dashes and underscores.",
            "Description": "Select an existing key pair. You must provide existing key pair to be able to SSH into EC2 instances.",
            "MaxLength": 64,
            "MinLength": 1,
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "PrivateSubnet1ID": {
            "Description": "ID of private subnet 1 in Availability Zone 1 for the Workload (e.g., subnet-c0236ecd)",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PrivateSubnet2ID": {
            "Description": "ID of private subnet 2 in Availability Zone 2 for the Workload (e.g., subnet-bdf5347d)",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PrivateSubnet3ID": {
            "Description": "ID of private subnet 3 in Availability Zone 3 for the Workload (e.g., subnet-bdf5347d)",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PublicSubnet1ID": {
            "Description": "ID of public subnet 1 in Availability Zone 1",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PublicSubnet2ID": {
            "Description": "ID of public subnet 2 in Availability Zone 2",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "PublicSubnet3ID": {
            "Description": "ID of public subnet 1 in Availability Zone 3",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "VPCID": {
            "Description": "ID of your existing VPC for deployment",
            "Type": "AWS::EC2::VPC::Id"
        },
        "VolSize": {
            "ConstraintDescription": "VolumeSize must be numeric and between 60 and 16384.",
            "Default": 60,
            "Description": "Volume Size (GB) for ECS cluster instances.",
            "MaxValue": 16384,
            "MinValue": 60,
            "Type": "Number"
        }
    },
    "Conditions": {
        "GovCloudCondition": {
            "Fn::Equals": [
                {
                    "Ref": "AWS::Region"
                },
                "us-gov-west-1"
            ]
        },
        "HasVolSize": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "VolSize"
                        },
                        ""
                    ]
                }
            ]
        },
        "HasClusterVolSize": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ClusterVolSize"
                        },
                        ""
                    ]
                }
            ]
        }
    },
    "Rules": {
        "SubnetsInVPC": {
            "Assertions": [
                {
                    "Assert": {
                        "Fn::EachMemberIn": [
                            {
                                "Fn::ValueOfAll": [
                                    "AWS::EC2::Subnet::Id",
                                    "VpcId"
                                ]
                            },
                            {
                                "Fn::RefAll": "AWS::EC2::VPC::Id"
                            }
                        ]
                    },
                    "AssertDescription": "All subnets must be in the VPC"
                }
            ]
        }
    },
    "Mappings": {
        "AWSAMIRegionMap": {
            "eu-west-1": {
                "AMI": "ami-0890627e6a66a65fb"
            }
        },
        "ECSAMIRegionMap": {
            "us-east-1": {
                "AMI": "ami-0796380bc6e51157f"
            },
            "us-east-2": {
                "AMI": "ami-04b61a4d3b11cc8ea"
            },
            "us-west-1": {
                "AMI": "ami-0c9bd36a7394439a6"
            },
            "us-west-2": {
                "AMI": "ami-0af5f077b70dafc30"
            },
            "eu-west-1": {
                "AMI": "ami-0dc3fa046ca0e570c"
            },
            "eu-west-2": {
                "AMI": "ami-0a9d4bf15de460a01"
            },
            "eu-west-3": {
                "AMI": "ami-0ad28cde309fa32d1"
            },
            "eu-central-1": {
                "AMI": "ami-0ce9ac8aed24e9ee5"
            }
        }
    },
    "Resources": {
        "SpotfireSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "VPCID"
                },
                "GroupDescription": "Security group for EC2 instance running TIBCO Spotfire.",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "CidrIp": {
                            "Ref": "AdminIngressLocation"
                        },
                        "FromPort": "3389",
                        "ToPort": "3389"
                    },
                    {
                        "CidrIp": {
                            "Ref": "CIDRBlockCluster"
                        },
                        "IpProtocol": -1
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}-Spotfire-Security"
                        }
                    }
                ]
            }
        },
        "AuroraSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "VPCID"
                },
                "GroupDescription": "Security group for Aurora DB",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": {
                            "Ref": "AdminIngressLocation"
                        },
                        "IpProtocol": "tcp",
                        "FromPort": "3306",
                        "ToPort": "3306"
                    },
                    {
                        "CidrIp": {
                            "Ref": "CIDRBlockCluster"
                        },
                        "FromPort": "3306",
                        "ToPort": "3306",
                        "IpProtocol": "tcp"
                    }
                ]
            }
        },
        "ContainerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "VPCID"
                },
                "GroupDescription": "Security group for F1 Tasks deployed",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": {
                            "Ref": "CIDRBlockCluster"
                        },
                        "IpProtocol": -1
                    }
                ]
            }
        },
        "MountTargetSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "VPCID"
                },
                "GroupDescription": "Security group for mount target",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": {
                            "Ref": "CIDRBlockCluster"
                        },
                        "IpProtocol": "tcp",
                        "FromPort": "2049",
                        "ToPort": "2049"
                    }
                ]
            }
        },
        "ECSHostSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "VPCID"
                },
                "GroupDescription": "Access to the ECS hosts and the tasks/containers that run on them",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": {
                            "Ref": "CIDRBlockCluster"
                        },
                        "IpProtocol": -1
                    },
                    {
                        "CidrIp": {
                            "Ref": "AdminIngressLocation"
                        },
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22"
                    }
                ]
            }
        },
        "IoTEC2StartupSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "VPCID"
                },
                "GroupDescription": "Security group for ec2 instance that creates and initializes AWS IoT certs and server keystore. This security group provides external ssh access and conectivity to your EFS instance.",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": {
                            "Ref": "CIDRBlockCluster"
                        },
                        "IpProtocol": "tcp",
                        "FromPort": "2049",
                        "ToPort": "2049"
                    },
                    {
                        "CidrIp": {
                            "Ref": "AdminIngressLocation"
                        },
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22"
                    }
                ]
            }
        },
        "IoTCertEC2Setup": {
            "Type": "AWS::EC2::Instance",
            "DependsOn": "StreamingThing",
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "ECSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMI"
                    ]
                },
                "InstanceType": "t2.small",
                "IamInstanceProfile": {
                    "Ref": "IoTInstanceProfile"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "InstanceInitiatedShutdownBehavior": "terminate",
                "SecurityGroupIds": [
                    {
                        "Ref": "IoTEC2StartupSecurityGroup"
                    }
                ],
                "SubnetId": {
                    "Ref": "PublicSubnet2ID"
                },
                "UserData" :{
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "echo 'Starting EC2-IoT cert UserData setup...'\n",
                                "sudo yum update -y\n",
                                "sudo yum install -y java-1.8.0-openjdk yum-utils nfs-utils\n",
                                "sudo yum -y groupinstall development\n",
                                "sudo yum -y install https://centos6.iuscommunity.org/ius-release.rpm\n",
                                "sudo yum -y install python36u\n",
                                "sudo yum -y install python36u-pip\n",
                                "sudo pip3.6 install awscli --upgrade\n",
                                "EC2_AVAIL_ZONE=`curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone`\n",
                                "EC2_REGION=",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "sudo mkdir /mnt/efs\n",
                                "EFS_FILE_SYSTEM_ID=",
                                {
                                    "Ref": "ContainerFileSystem"
                                },
                                "\n",
                                "DIR_SRC=$EC2_AVAIL_ZONE.$EFS_FILE_SYSTEM_ID.efs.$EC2_REGION.amazonaws.com\n",
                                "DIR_TGT=/mnt/efs\n",
                                "touch /home/ec2-user/echo.res\n",
                                "echo $EFS_FILE_SYSTEM_ID >> /home/ec2-user/echo.res\n",
                                "echo $EC2_AVAIL_ZONE >> /home/ec2-user/echo.res\n",
                                "echo $EC2_REGION >> /home/ec2-user/echo.res\n",
                                "echo $DIR_SRC >> /home/ec2-user/echo.res\n",
                                "echo $DIR_TGT >> /home/ec2-user/echo.res\n",
                                "mount -t nfs4 -o nfsvers=4.1 $DIR_SRC:/ $DIR_TGT >> /home/ec2-user/echo.res\n",
                                "cp -p /etc/fstab /etc/fstab.back-$(date +%F)\n",
                                "echo -e \"$DIR_SRC:/ \t\t $DIR_TGT \t\t nfs \t\t defaults \t\t 0 \t\t 0\" | tee -a /etc/fstab\n",
                                "sudo mkdir -p /mnt/efs/share/tls\n",
                                "aws iot create-keys-and-certificate --set-as-active --certificate-pem-outfile ./mnt/efs/share/tls/cert.pem --public-key-outfile ./mnt/efs/share/tls/publicKey.pem --private-key-outfile ./mnt/efs/share/tls/privateKey.pem --region ",
                                {
                                    "Ref":"AWS::Region"
                                },
                                " &> /dev/null\n",
                                "\n",
                                "echo 'aws IoT certificates created, these were placed and saved on efs within your /mtn/efs/share/tls folder...'\n",
                                "curl -o /mnt/efs/share/tls/AmazonRootCA1.crt https://www.amazontrust.com/repository/AmazonRootCA1.pem\n",
                                "cd /mnt/efs/share/tls\n",
                                "openssl rsa -aes256 -in privateKey.pem -out privateKey.encrypted.pem -passout pass:tibco123\n",
                                "openssl pkcs12 -export -in cert.pem -inkey privateKey.encrypted.pem -certfile cert.pem -out tempkeystore.p12 -passin pass:tibco123 -passout pass:tibco123\n",
                                "keytool -importkeystore -destkeystore SBserver.jceks -deststoretype JCEKS -deststorepass tibco123 -destalias 'aws iot cert' -srckeystore tempkeystore.p12 -srcstoretype PKCS12 -srcstorepass tibco123 -srcalias 1\n",
                                "keytool -importcert -alias 'amazon root ca 1' -file AmazonRootCA1.crt -keystore SBserverTrust.jceks -storetype JCEKS -storepass pass:tibco123 -noprompt\n"
                            ]
                        ]
                    }
                }
            }
        },
        "IoTInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "IoTRole"
                    }
                ]
            }
        },
        "SpotfireEC2Setup": {
            "Type": "AWS::EC2::Instance",
            "DependsOn": "AuroraDBInstance",
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMI"
                    ]
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "SpotfireSecurityGroup"
                    }
                ],
                "SubnetId": {
                    "Ref": "PublicSubnet1ID"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName} - Spotfire"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "<script>\n",
                                "cd C:\\Users\\Administrator\\Desktop\\sql_setup\n",
                                "echo %DATE% %TIME% >> %SystemRoot%\\Temp\\time.log\n",
                                "mysql -h ",
                                {
                                    "Fn::GetAtt": [
                                        "AuroraDBInstance",
                                        "Endpoint.Address"
                                    ]
                                },
                                " -P ",
                                {
                                    "Fn::GetAtt": [
                                        "AuroraDBInstance",
                                        "Endpoint.Port"
                                    ]
                                },
                                " -u ",
                                {
                                    "Ref": "DBUsername"
                                },
                                " -p",
                                {
                                    "Ref": "DBPassword"
                                },
                                " < DB_export18v7_general.sql\n",
                                "echo %TIME% >> %SystemRoot%\\Temp\\time.log\n",
                                "</script>\n"
                            ]
                        ]
                    }
                }
            }
        },
        "ECSCluster": {
            "Type": "AWS::ECS::Cluster",
            "Properties": {
                "ClusterName": {
                    "Ref": "AWS::StackName"
                }
            }
        },
        "ECSAutoScalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "DependsOn": [
                "ContainerMountTarget1",
                "ContainerMountTarget2",
                "ContainerMountTarget3"
            ],
            "Properties": {
                "VPCZoneIdentifier": [
                    {
                        "Ref": "PublicSubnet1ID"
                    },
                    {
                        "Ref": "PublicSubnet2ID"
                    },
                    {
                        "Ref": "PublicSubnet3ID"
                    }
                ],
                "LaunchConfigurationName": {
                    "Ref": "ECSLaunchConfiguration"
                },
                "MinSize": "2",
                "MaxSize": "20",
                "DesiredCapacity": {
                    "Ref": "ClusterSize"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName} ECS host"
                        },
                        "PropagateAtLaunch": true
                    }
                ]
            }
        },
        "ECSLaunchConfiguration": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "DependsOn": [
                "IoTCertEC2Setup",
                "ContainerFileSystem"
            ],
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "ECSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMI"
                    ]
                },
                "InstanceType": {
                    "Ref": "ClusterInstanceType"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "DeleteOnTermination": false,
                            "VolumeType": "gp2",
                            "VolumeSize": {
                                "Fn::If": [
                                    "HasClusterVolSize",
                                    {
                                        "Ref": "ClusterVolSize"
                                    },
                                    30
                                ]
                            }
                        }
                    }
                ],
                "SecurityGroups": [
                    {
                        "Ref": "ECSHostSecurityGroup"
                    }
                ],
                "IamInstanceProfile": {
                    "Ref": "ECSInstanceProfile"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "sudo yum update -y\n",
                                "sudo yum install -y nfs-utils\n",
                                "EC2_AVAIL_ZONE=`curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone`\n",
                                "EC2_REGION=",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "sudo mkdir /mnt/efs\n",
                                "EFS_FILE_SYSTEM_ID=",
                                {
                                    "Ref": "ContainerFileSystem"
                                },
                                "\n",
                                "DIR_SRC=$EC2_AVAIL_ZONE.$EFS_FILE_SYSTEM_ID.efs.$EC2_REGION.amazonaws.com\n",
                                "DIR_TGT=/mnt/efs\n",
                                "touch /home/ec2-user/echo.res\n",
                                "echo $EFS_FILE_SYSTEM_ID >> /home/ec2-user/echo.res\n",
                                "echo $EC2_AVAIL_ZONE >> /home/ec2-user/echo.res\n",
                                "echo $EC2_REGION >> /home/ec2-user/echo.res\n",
                                "echo $DIR_SRC >> /home/ec2-user/echo.res\n",
                                "echo $DIR_TGT >> /home/ec2-user/echo.res\n",
                                "mount -t nfs4 -o nfsvers=4.1 $DIR_SRC:/ $DIR_TGT >> /home/ec2-user/echo.res\n",
                                "cp -p /etc/fstab /etc/fstab.back-$(date +%F)\n",
                                "echo -e \"$DIR_SRC:/ \t\t $DIR_TGT \t\t nfs \t\t defaults \t\t 0 \t\t 0\" | tee -a /etc/fstab\n",
                                "echo ECS_CLUSTER=",
                                {
                                    "Ref": "ECSCluster"
                                },
                                " >> /etc/ecs/ecs.config\n",
                                "echo ECS_CHECKPOINT=false >> /etc/ecs/ecs.config\n",
                                "echo ECS_ENGINE_TASK_CLEANUP_WAIT_DURATION=8m >> /etc/ecs/ecs.config\n",
                                "echo ECS_DISABLE_IMAGE_CLEANUP=false >> /etc/ecs/ecs.config\n",
                                "echo ECS_IMAGE_CLEANUP_INTERVAL=15m >> /etc/ecs/ecs.config\n",
                                "echo ECS_IMAGE_MINIMUM_CLEANUP_AGE=1h >> /etc/ecs/ecs.config\n",
                                "echo ECS_NUM_IMAGES_DELETE_PER_CYCLE=5 >> /etc/ecs/ecs.config\n",
                                {
                                    "Fn::Sub": "/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration"
                                },
                                {
                                    "Fn::Sub": "/opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSAutoScalingGroup"
                                }
                            ]
                        ]
                    }
                }
            }
        },
        "ECSInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "ECSClusterRole"
                    }
                ]
            }
        },
        "LDMTaskDefinition": {
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "ContainerDefinitions": [
                    {
                        "Image": "544643958209.dkr.ecr.eu-west-1.amazonaws.com/f1_ldm:latest",
                        "Memory": 8192,
                        "Cpu": 4096,
                        "Name": "f1-ldm",
                        "PortMappings": [
                            {
                                "ContainerPort": 10080,
                                "HostPort": 10080,
                                "Protocol": "tcp"
                            },
                            {
                                "ContainerPort": 2000,
                                "HostPort": 2000,
                                "Protocol": "tcp"
                            },
                            {
                                "ContainerPort": 10000,
                                "HostPort": 10000,
                                "Protocol": "tcp"
                            }
                        ],
                        "Environment": [
                            {
                                "Name": "NODENAME",
                                "Value": "A.f1-ldm"
                            }
                        ]
                    }
                ],
                "Memory": "8192",
                "Cpu": "4096",
                "NetworkMode": "awsvpc",
                "RequiresCompatibilities": [
                    "EC2"
                ],
                "Family": "f1-demo"
            }
        },
        "LDMService": {
            "Type": "AWS::ECS::Service",
            "Properties": {
                "Cluster": {
                    "Ref": "ECSCluster"
                },
                "DesiredCount": 1,
                "ServiceName": "LVHost",
                "LaunchType": "EC2",
                "NetworkConfiguration": {
                    "AwsvpcConfiguration": {
                        "SecurityGroups": [
                            {
                                "Ref": "ContainerSecurityGroup"
                            }
                        ],
                        "Subnets": [
                            {
                                "Ref": "PublicSubnet1ID"
                            },
                            {
                                "Ref": "PublicSubnet2ID"
                            },
                            {
                                "Ref": "PublicSubnet3ID"
                            }
                        ]
                    }
                },
                "TaskDefinition": {
                    "Ref": "LDMTaskDefinition"
                }
            }
        },
        "CEPTaskDefinition": {
            "Type": "AWS::ECS::TaskDefinition",
            "DependsOn": "ECSLaunchConfiguration",
            "Properties": {
                "ContainerDefinitions": [
                    {
                        "Image": "544643958209.dkr.ecr.eu-west-1.amazonaws.com/f1_cep:latest",
                        "Memory": 4096,
                        "Cpu": 2048,
                        "Name": "f1-cep",
                        "PortMappings": [
                            {
                                "ContainerPort": 8080,
                                "HostPort": 8080,
                                "Protocol": "tcp"
                            },
                            {
                                "ContainerPort": 10000,
                                "HostPort": 10000,
                                "Protocol": "tcp"
                            },
                            {
                                "ContainerPort": 2000,
                                "HostPort": 2000,
                                "Protocol": "tcp"
                            }
                        ],
                        "MountPoints": [
                            {
                                "SourceVolume": "efs",
                                "ContainerPath": "/usr/share/tls",
                                "ReadOnly": false
                            }
                        ],
                        "Environment": [
                            {
                                "Name": "NODENAME",
                                "Value": "A.f1-cep"
                            },
                            {
                                "Name": "SUBSTITUTIONS",
                                "Value": "DB_URL=a"
                            }
                        ]
                    }
                ],
                "Volumes": [
                    {
                        "Name": "efs",
                        "Host": {
                            "SourcePath": "/mnt/efs/share/tls"
                        }
                    }
                ],
                "Memory": "4096",
                "Cpu": "2048",
                "NetworkMode": "awsvpc",
                "RequiresCompatibilities": [
                    "EC2"
                ],
                "Family": "f1-Cep"
            }
        },
        "CEPService": {
            "Type": "AWS::ECS::Service",
            "Properties": {
                "Cluster": {
                    "Ref": "ECSCluster"
                },
                "DesiredCount": 1,
                "ServiceName": "CEPHost",
                "LaunchType": "EC2",
                "NetworkConfiguration": {
                    "AwsvpcConfiguration": {
                        "SecurityGroups": [
                            {
                                "Ref": "ContainerSecurityGroup"
                            }
                        ],
                        "Subnets": [
                            {
                                "Ref": "PublicSubnet1ID"
                            },
                            {
                                "Ref": "PublicSubnet2ID"
                            },
                            {
                                "Ref": "PublicSubnet3ID"
                            }
                        ]
                    }
                },
                "TaskDefinition": {
                    "Ref": "CEPTaskDefinition"
                }
            }
        },
        "dbSubnetGroup": {
            "Type": "AWS::RDS::DBSubnetGroup",
            "Properties": {
                "DBSubnetGroupDescription": "Subnet group for Aurora DB.",
                "DBSubnetGroupName": "aurorasubnet",
                "SubnetIds": [
                    {
                        "Ref": "PublicSubnet1ID"
                    },
                    {
                        "Ref": "PublicSubnet2ID"
                    },
                    {
                        "Ref": "PublicSubnet3ID"
                    }
                ]
            }
        },
        "AuroraDBCluster": {
            "Type": "AWS::RDS::DBCluster",
            "Properties":
            {
                "DBClusterIdentifier": "f1-demo-aurora",
                "DBSubnetGroupName": "aurorasubnet",
                "Engine": "aurora-mysql",
                "VpcSecurityGroupIds": [
                    {
                        "Ref": "AuroraSecurityGroup"
                    }
                ],
                "MasterUsername": {
                    "Ref": "DBUsername"
                },
                "MasterUserPassword": {
                    "Ref": "DBPassword"
                },
                "DBClusterParameterGroupName": "default.aurora-mysql5.7"
            }
        },
        "AuroraDBInstance": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "DBSubnetGroupName": "aurorasubnet",
                "Engine": "aurora-mysql",
                "DBClusterIdentifier": {
                    "Ref": "AuroraDBCluster"
                },
                "PubliclyAccessible": "true",
                "DBInstanceClass": "db.r4.large",
                "DBParameterGroupName": "default.aurora-mysql5.7"
            }
        },
        "ContainerFileSystem": {
            "Type": "AWS::EFS::FileSystem",
            "Properties": {
                "PerformanceMode": "generalPurpose",
                "FileSystemTags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName} - FileSystem"
                        }
                    }
                ]
            }
        },
        "ContainerMountTarget1": {
            "Type": "AWS::EFS::MountTarget",
            "Properties": {
                "FileSystemId": {
                    "Ref": "ContainerFileSystem"
                },
                "SecurityGroups": [
                    {
                        "Ref": "MountTargetSecurityGroup"
                    }
                ],
                "SubnetId": {
                    "Ref": "PublicSubnet1ID"
                }
            }
        },
        "ContainerMountTarget2": {
            "Type": "AWS::EFS::MountTarget",
            "Properties": {
                "FileSystemId": {
                    "Ref": "ContainerFileSystem"
                },
                "SecurityGroups": [
                    {
                        "Ref": "MountTargetSecurityGroup"
                    }
                ],
                "SubnetId": {
                    "Ref": "PublicSubnet2ID"
                }
            }
        },
        "ContainerMountTarget3": {
            "Type": "AWS::EFS::MountTarget",
            "Properties": {
                "FileSystemId": {
                    "Ref": "ContainerFileSystem"
                },
                "SecurityGroups": [
                    {
                        "Ref": "MountTargetSecurityGroup"
                    }
                ],
                "SubnetId": {
                    "Ref": "PublicSubnet3ID"
                }
            }
        },
        "StreamingThing": {
            "Type": "AWS::IoT::Thing",
            "Properties": {
                "ThingName": "StreamingThing"
            }
        },
        "ECSClusterRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "Path": "/",
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
                ],
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                }
            }
        },
        "IoTRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "Path": "/",
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "iot.amazonaws.com",
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": "default-iot-policy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iot:Publish",
                                        "iot:Receive",
                                        "iot:Subscribe",
                                        "iot:Connect",
                                        "iot:CreateKeysAndCertificate",
                                        "iot:DescribeEndpoint"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "allow-efs-policy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "elasticfilesystem:CreateFileSystem",
                                        "elasticfilesystem:CreateMountTarget"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "allow-ec2-policy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:CreateTags*",
                                        "ec2:Describe*"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        }
    },
    "Outputs": {
        "SpotfireEC2Instance": {
            "Description": "IP address of the EC2 instance running Spotfire",
            "Value": {
                "Fn::GetAtt": [
                    "SpotfireEC2Setup",
                    "PublicIp"
                ]
            }
        },
        "AuroraDB":{
            "Description": "Endpoint of Aurora DB",
            "Value": {
                "Fn::GetAtt": [
                    "AuroraDBInstance",
                    "Endpoint.Address"
                ]
            }
        },
        "ECSClusterName": {
            "Description": "Name of the ECS Cluster created",
            "Value": {
                "Ref": "ECSCluster"
            }
        },
        "ECSCluster": {
            "Description": "A reference to the ECS cluster.",
            "Value": {
                "Fn::Sub": "https://console.aws.amazon.com/ecs/home?region=${AWS::Region}#/clusters/${ECSCluster}/services"
            }
        }
    }
}
